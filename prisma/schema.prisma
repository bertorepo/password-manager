// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}


model User {
  id        String      @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  emailVerified DateTime? @map("email_verified")
  role UserRole @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String   @map("image_url") @default("")
  webCredentials  WebCredential[]
  notes Note[]
  emailCredentials EmailCredential[]
}

model WebCredential {
  id        String    @id @default(uuid())
  title     String   @unique
  siteUrl     String @map("site_url")
  isImportant Boolean @map("is_important") @default(false)   
  usernameOrEmail  String  @map("username_or_email")
  password  String
  isDeleted Boolean @map("is_deleted") @default(false)
  userId String @map("user_id")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailCredential {
  id        String    @id @default(uuid())
  title     String   @unique
  siteUrl     String @map("site_url")
  isImportant Boolean @map("is_important") @default(false)   
  usernameOrEmail  String @map("username_or_email")
  password  String
  isDeleted Boolean @map("is_deleted") @default(false)
  userId String @map("user_id")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String    @id @default(uuid())
  title     String   @unique
  content Json?
  isImportant Boolean @map("is_important") @default(false)
  isDeleted Boolean @map("is_deleted") @default(false)   
  userId String @map("user_id")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailVerification {
  id String @id @default(cuid())
  email String
  token String
  attempt Int @default(1)
  expiresAt DateTime @map("expires_at")

  @@unique([email, token])
}
model PasswordVerification {
  id String @id @default(cuid())
  email String
  token String
  attempt Int @default(1)
  expiresAt DateTime @map("expires_at")

  @@unique([email, token])
}

enum UserRole {
  User
  ADMIN
}
